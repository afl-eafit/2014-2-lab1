Programming Lab 1: Simulating a Non-deterministic finite automaton
Submission deadline:

Introduction
The aim of this programming assigment is to write a Haskell program
that given a non-deterministic finite automaton NFA and a word w,
determines if w ∈ L(NFA).

Assigment

   - Download from the GitHub repository dmonto3/PL1 the modules NFA and
     Example, where you will find an implementation and an example of a
     non-deterministic finite automaton.

   - Using the module NFA, define a function.

      simulatingNFA :: NFA states symbols -> [symbols] -> Bool

     that test if a word w == [symbols] ∈ L(NFA).

Clean code

Before submiting your code, clean it up! Clean code:

   - Does not have long lines (at most 80 columns).
   - Has a consistent layout.
   - Has type signatures for everything (even where clauses
     and let expressions).
   - Has good comments.
   - Has no junk (unused code, commented code, unnecessary code).
   - Has no overly complicated function definitions.
   - Does not contain any repetitive code.

Submission

Send an email to asicard(at)eafit(dot)edu(dot)co and
dmonto39(at)eafit(dot)edu(dot)co and attach a compressed file
with your solution.

Your submission has to include the following:
   - SimulationNFA.hs, a Haskell module file with your solution for th
      assigment.
   - README, a file containing at least the following information.
      - The name of your program.
      - Your name(s).
      - A general description of your program.
      - Information on how to use your program.

Notes
   - The programming lab may either be solved on your own, or jointly with one
     other student taking the course.
   - You are to use the Haskell Platform 2014.2.0.0 or GHC 7.8.3.
   - You can add class constraints to the type signature of simulatingNFA if you
     need them.

Bibliography

Hopcroft, John E.; Motwani, Rajeev; Ullman, Jeffrey D. (2006). Introduction to
Automata Theory , Languages, and Computation (3rd ed.). Addison-Wesley.
